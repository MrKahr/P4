//Prolog for rules + COBOL readability

/*** TODO ***/
/*
- Find out how actions are consumed/modelled?
- We would like a stack, so a rule gets evaluated,
and any side effects of that rule are evaluated immediately afterwards.
- Find how we handle the active player
- It should be done with a rule by a developer
- How do we pass elements between actions?
- The element is used as an argument for the next action
- Consider where to put initialize?
- Right now it happens in the code itself, without a body
- Consider functionality of playGames?
- It was turned into an action that decides the starting state state 
"GameStart"
*/
// Example of use of RESULT in rule (TBD)
Rule example: WHEN [Action1] IF [Action1.RESULT EQUALS 0] THEN [Action2]   
//when catching two actions with the same rule: just write it twice
              WHEN [Action2] IF [Action2.RESULT EQUALS 0] THEN [Action3]   
//RESULT is local to the rule and refers to
//the return value of the action that triggered it


/*** TEMPLATES ***/

Template Card CONTAINS {
  String color,
  Integer number
}

Template Deck CONTAINS{
  Card cards[],
  Card top, 
  Card bottom
}

Template Player CONTAINS{
  String name,
  Deck hand,
  Integer handSize
}

Template Board CONTAINS{
    Player players[], // Array of players
    Deck decks[], // Array of decks
    Player activePlayer
}

/*** ACTIONS ***/
Action Combine(Template template, Any anys[], Any anys[],...) RESULTS IN Template []
// Fills attributes of a specified template
//with all combinations of supplied array elements
Action Draw(Deck deckSource, Deck deckTarget, Integer numberOfCardsToDraw)
// Removes card from source and adds it to target
Action Shuffle(Deck deckSource)
// Reorders cards in a deck randomly
Action DrawAll(Deck deckSource, Deck deckTarget)
// Uses Draw until source is empty
Action AddCard(Card card, Deck deckTarget)
Action RemoveCard(Deck deckTarget)
Action ReadAction() RESULTS IN String
// Language contains an implicit rule on changing game States
//that prompts player for actions specified by "State ALLOWS"
Action WriteAction(Action action) 
Action FindCardByIndex(Deck deckSource, Integer index) RESULTS IN Card 
Action FillDeck(Deck[] decks, Deck deckTarget)
Action PlayCard(Card card) RESULTS IN Card
Action ChangeActivePlayer(Player playerSource, Player playerTarget)
Action NextState()
// Changes State in the order they are declared, looping at last State
Action ChangeState(State state) RESULTS IN State
Action ProduceError()
Action GetState() RESULTS IN State
Action Print(String s)
Action Exists(Any[], Action condition)
// Does not fit current design ideas
Action StringToInt(String s) RESULTS IN Integer
Action GameStart(State startingState)


// X User-defined
Action DeclareWinner(Player winner) {
  write("Winner found");
}

// X
Action showBoard(Board board) {
  String s IS board.activePlayer + "'s turn. Hand: \n";
  Integer i IS 0;
  FOR(Integer i IS 0; i LESS THAN board.activePlayer.handSize; i IS i+1) {
    s IS s + "card " + i + "[" + board.activePlayer.hand.cards[i].value + ", " + board.activePlayer.hand.cards[i].color + "]\n",
  }
  Print(s):
}

// X
Action containsValidCard(Deck hand, Card topCard) RESULTS IN boolean {
    
  FOR(Integer i IS 0; i LESS THAN hand.handSize; i IS i+1) {
    Boolean result IS false;
    IF(hand.cards[i].color EQUALS topCard.color OR hand.cards[i].number EQUALS topCard.number) {
      result IS true;
    }
  }
  RESULT IN result
}

// X
Action updateActivePlayer(Board board) {
  IF(board.activePlayer EQUALS board.players[0]) {
    board.activePlayer IS board.players[1];
  } ELSE {
    board.activePlayer IS board.players[0];
  }
}

/*** RULES ***/
/*
Potential inspiration here:
https://swt.informatik.uni-freiburg.de/staff/berstel/rw07.pdf /
Rules are evaluated in the order they are written 
- check whether events are consumed
*/
// SKETCH
// Rule X: WHEN [Action] IF [Condition] THEN [Action] ELSE [Action]

// x
Rule mustShuffle: WHEN [Draw] IF [storeBoard.RESULT.decks[1].size LESS THAN 1]{
    Board board IS storeBoard.RESULT;
    Shuffle(board.decks[0]);
    DrawAll(board.decks[0], board.decks[1]);
    storeBoard(board);
}

// x
Rule drawUntilValid: WHEN [Draw, ChangeState] IF [getState() EQUALS "Play" AND NOT containsValidCard(storeBoard.RESULT.activePlayer.hand, storeBoard.RESULT.decks[0].top)]{
    Board board IS storeBoard.RESULT;
    Draw(board.decks[1], board.activePlayer.hand);
    storeBoard(board);
}

// X
Rule playsValidCard: WHEN [PlayCard] IF[PlayCard.RESULT.color EQUALS storeBoard.RESULT.decks[0].Top.color OR PlayCard.RESULT.number EQUALS storeBoard.RESULT.decks[0].Top.number]{
    Board board IS storeBoard.RESULT;
    RemoveCard(board.activePlayer.hand), updateActivePlayer();
    storeBoard(board);
}

// X
Rule winner: WHEN [PlayCard] IF [storeBoard.RESULT.activePlayer.hand.size LESS THAN 1] {
    ChangeState("End");
}

//may not be needed
Rule startTurn: WHEN [ChangeState] IF [GetState() EQUALS Play] {
    Board board IS storeBoard.RESULT;
    ShowBoard(board);
    PlayCard(board.activePlayer.hand[StringToInt(ReadAction())])
}

/*** STATES ***/ 
// Global variable keeps track of current state
State Start ALLOWS [Draw, Shuffle]
// Allowable actions are declared - error if wrong actions performed
State Play ALLOWS [ALL]
State End ALLOWS [Shuffle]

/*** MAIN GAME ***/
// X
Player playerOne IS NEW Player {"Bob"; NEW Deck;};
Player playerTwo IS NEW Player {"Bo"; NEW Deck;};

// X
Board b1 IS NEW Board {
  [playerOne, playerTwo];
  Combine(Card, ["red", "green", "yellow", "blue"], [1, 2, 3, 4, 5, 6, 7, 8, 9]);
  playerOne;
}
storeBoard(b1);

// X
Shuffle(storeBoard.RESULT.decks[1]);

// X
Draw(storeBoard.RESULT.decks[1], storeBoard.RESULT.players[0].hand, 7);
Draw(storeBoard.RESULT.decks[1], storeBoard.RESULT.players[1].hand, 7);

// X
setState(Play);

// Runs the game
// Start - Game initialization
// Play  - Gameplay loop
// End   - End of game