/*** TEMPLATES ***/

Template Card CONTAINS {
  String color;
  Integer value;
}

Template Deck CONTAINS {
  Card[] cards;
}

Template Player CONTAINS {
  String name;
  Deck hand;
}

Template Board CONTAINS {
    Player[] players;
    Deck[] decks;       // Index 0 is draw pile, index 1 is discard pile
    Player activePlayer;
}


/*** ACTIONS ***/
/*
* ┌──────────────────┐
* │    Algorithms    │
* └──────────────────┘
*/
Action modulo(Integer a, Integer n) RESULTS IN Integer {
    Integer q IS a / n;
    Integer r IS a - n * q;
    RESULT IN r;
}


// Note: must only be used by the RNG algorithm
Action seedStore(Integer[] seeds) RESULTS IN Integer[] {
    RESULT IN seeds;
}


// Multiplicative Congruential Generator (A.k.a. the Lehmer RNG)
// Note: this implementation is extremely deterministic!
// Runtime: O(1)
Action RNG() RESULTS IN Integer {
    Integer s1;
    // Initialize seed
    IF(size(seedStore.RESULT) EQUALS 0) {
        // s1 should be random from 1 to 30,000.
        s1 IS 5801;
    } ELSE {
        s1 IS seedStore.RESULT[0];
    }

    s1 IS modulo(171 * s1, 30269);
    seedStore([s1]);
    RESULT IN s1;
}


// The modern version of the Fisher–Yates shuffle
// Runtime: O(n)
Action shuffle(Deck deckSource) RESULTS IN Deck {
    Integer deckSize IS size(deckSource.cards)-1;

    FOR(Integer i IS deckSize; i GREATER OR EQUALS 1; i IS i - 1) {
        Integer j IS modulo(RNG(), deckSize);
        Card jCard IS deckSource.cards[j];
        Card iCard IS deckSource.cards[i];
        deckSource.cards[j] IS iCard;
        deckSource.cards[i] IS jCard;
    }
    RESULT IN deckSource;
}


/*
* ┌────────────────────┐
* │    Muno-related    │
* └────────────────────┘
*/
Action setupGame(Boolean isSetup) RESULTS IN Boolean {
    RESULT IN isSetup;
}

Action checkWinner(){}


Action storeBoard(Board board) RESULTS IN Board {
    RESULT IN board;
}


Action addCard(Card card, Deck deck) RESULTS IN Deck {
    deck.cards[size(deck.cards)] IS card;
    RESULT IN deck;
}


// Remove a card from a deck
// Runtime: O(n)
Action removeCard(Card cardToRemove, Deck targetDeck) RESULTS IN Deck {
    Deck newDeck IS NEW Deck{};

    FOR(Integer i IS 0; i LESS THAN size(targetDeck.cards); i IS i+1){
        Card currentCard IS targetDeck.cards[i];

        // Add card to new deck if it should be kept
        IF(currentCard.color NOT EQUALS cardToRemove.color OR currentCard.value NOT EQUALS cardToRemove.value){
            newDeck IS addCard(currentCard, newDeck);
        }
    }
    RESULT IN newDeck;
}


// Draw X cards from draw pile to activePlayer hand
// Runtime: O(n^2)
Action drawToPlayer(Integer valueOfCardsTodraw) {
    Board board IS storeBoard.RESULT;

    FOR(Integer i IS 0; i LESS THAN valueOfCardsTodraw; i IS i + 1){
        Integer drawDeckSize IS size(board.decks[0].cards) - 1;
        IF(NOT drawDeckSize LESS THAN 0) {
            Card card IS board.decks[0].cards[drawDeckSize]; // Get reference to card
            board.decks[0] IS removeCard(card, board.decks[0]); // Remove card from draw deck
            board.activePlayer.hand IS addCard(card, board.activePlayer.hand);    // Add card to player's hand
        } ELSE {
            write("Drawing card with index out of bounds!");
        }
    }
    storeBoard(board);
    IF(NOT setupGame.RESULT) {
        write("You drew a card!");
    }
}


// Add a top card to the discard pile
Action addTopCard() {
    Board board IS storeBoard.RESULT;
    Integer drawDeckSize IS size(board.decks[0].cards) - 1;
    IF(drawDeckSize LESS THAN 0) {
        write("Drawing card with index out of bounds!");
    }
    Card card IS board.decks[0].cards[drawDeckSize]; // Get reference to card
    board.decks[0] IS removeCard(card, board.decks[0]); // Remove card from draw deck
    board.decks[1] IS addCard(card, board.decks[1]);    // Add card to player's hand
    storeBoard(board);
}


Action playCard(Integer choice) RESULTS IN Card {
    Board board IS storeBoard.RESULT;
    Card card;
    Integer handSize IS size(board.activePlayer.hand.cards) - 1;
    IF(choice LESS OR EQUALS handSize){
        card IS board.activePlayer.hand.cards[choice];
    } ELSE {
        write("Invalid input. Expected input in range " + 0 + "-" + handSize);
    }
    RESULT IN card;
}


// Create a predefined set of cards
Action makeCards() RESULTS IN Deck {
    Deck resultDeck IS NEW Deck{};
    String[] colors IS ["red", "green", "yellow", "blue"];
    Integer[] values IS [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

    FOR(Integer i IS 0; i LESS THAN 4; i IS i+1) {
        FOR(Integer j IS 0; j LESS THAN 10; j IS j+1) {
            resultDeck IS addCard(NEW Card{colors[i]; values[j];}, resultDeck);
        }
    }
    RESULT IN resultDeck;
}


Action declareWinner(Player player) {
    write("Winner found: " + player.name + ". Congratulations!");
}


Action showBoard(Board board) {
    String s IS "\n\nIt is " + board.activePlayer.name + "'s turn. Hand: \n";
    FOR(Integer i IS 0; i LESS THAN size(board.activePlayer.hand.cards); i IS i+1) {
        s IS s + "[" + i + "]" + " card: " + "{" + "Value: " + board.activePlayer.hand.cards[i].value + ", Color: " + board.activePlayer.hand.cards[i].color + "}\n";
    }
    write(s);

    Card topcard IS board.decks[1].cards[size(board.decks[1].cards) - 1];
    String topCardString IS "The top card of the discard pile is card: " + "{" + "Value: " + topcard.value + ", Color: " + topcard.color + "}\n";
    write(topCardString);
}


Action showDeck(Deck deck, String boardName) {
    String s IS "\n\n Showing board " + boardName + ": \n";
    FOR(Integer i IS 0; i LESS THAN size(deck.cards); i IS i+1) {
        s IS s + "[" + i + "]" + " card: " + "{" + "Value: " + deck.cards[i].value + ", Color: " + deck.cards[i].color + "}\n";
    }
    write(s);
}


Action containsValidCard(Deck hand, Card topCard) RESULTS IN Boolean {
    Boolean result IS false;
    FOR(Integer i IS 0; i LESS THAN size(hand.cards); i IS i+1) {
        IF(hand.cards[i].color EQUALS topCard.color OR hand.cards[i].value EQUALS topCard.value) {
            result IS true;
        }
    }
    RESULT IN result;
}


Action findValidCard() RESULTS IN Integer {
    Board board IS storeBoard.RESULT;
    Integer validCardIndex IS 1 - 2;
    Boolean continue IS true;

    Card topCard IS board.decks[1].cards[size(board.decks[1].cards) - 1];
    FOR(Integer i IS 0; i LESS THAN size(board.activePlayer.hand.cards) AND continue; i IS i+1) {
        Card currentCard IS board.activePlayer.hand.cards[i];
        IF(currentCard.color EQUALS topCard.color OR currentCard.value EQUALS topCard.value) {
            validCardIndex IS i;
            continue IS false;
        }
    }
    RESULT IN validCardIndex;
}


Action updateActivePlayer(Boolean noSwitch) {
    IF(NOT noSwitch) {
        Board board IS storeBoard.RESULT;
        IF(board.activePlayer.name EQUALS board.players[0].name) {
            board.players[0] IS board.activePlayer;
            board.activePlayer IS board.players[1];
        } ELSE {
            board.players[1] IS board.activePlayer;
            board.activePlayer IS board.players[0];
        }
        storeBoard(board);
    }
}


/*
Action autoPlay() {
    // Draw cards until we have a valid card to play
    FOR(Integer i; NOT "End" EQUALS setState.RESULT; i IS i) {
        Integer validCardIndex IS findValidCard();
        // Play card if valid
        IF(validCardIndex GREATER OR EQUALS 0) {
            playCard(validCardIndex);
        } ELSE {
            write("No valid card in hand! Oh well");
        }

    }
}
*/

/*** RULES ***/
Rule mustShuffle WHEN [drawToPlayer] IF (("AutoPlay" EQUALS setState.RESULT OR "Play" EQUALS setState.RESULT) AND size(storeBoard.RESULT.decks[0].cards) EQUALS 0){
    Board board IS storeBoard.RESULT;

    // Ensure index is correct
    Integer drawDeckSize IS size(board.decks[0].cards);
    IF(drawDeckSize GREATER THAN 0) {
        drawDeckSize IS drawDeckSize - 1;
    }
    // Add any remaining cards in the draw pile to the discard pile before shuffle
    FOR(Integer i IS 0; i LESS THAN drawDeckSize; i IS i + 1) {
        Card card IS board.decks[0].cards[i];
        board.decks[1] IS addCard(card, board.decks[1]);
    }

    board.decks[0] IS shuffle(board.decks[1]); // Shuffle discard pile into draw pile
    board.decks[1] IS NEW Deck{};              // Remove all cards from discard pile
    storeBoard(board);
    addTopCard();

    IF(NOT setupGame.RESULT){
        write("Reshuffling discard pile into draw pile!");
    }
}


Rule drawUntilValid WHEN [drawToPlayer, setState, updateActivePlayer] IF (
    ("AutoPlay" EQUALS setState.RESULT OR "Play" EQUALS setState.RESULT) AND
    NOT containsValidCard(
        storeBoard.RESULT.activePlayer.hand,
        storeBoard.RESULT.decks[1].cards[size(storeBoard.RESULT.decks[1].cards) - 1]
        )
    ){
    drawToPlayer(1);
}


Rule playsValidCard WHEN [playCard] IF (
    playCard.RESULT.color EQUALS storeBoard.RESULT.decks[1].cards[size(storeBoard.RESULT.decks[1].cards) - 1].color
    OR playCard.RESULT.value EQUALS storeBoard.RESULT.decks[1].cards[size(storeBoard.RESULT.decks[1].cards) - 1].value
    ){
    Board board IS storeBoard.RESULT;
    board.activePlayer.hand IS removeCard(playCard.RESULT, board.activePlayer.hand);
    board.decks[1] IS addCard(playCard.RESULT, board.decks[1]); // Add played card to discard pile
    write("You've played card: " + "{" + "Value: " + playCard.RESULT.value + ", Color: " + playCard.RESULT.color + "}\n");
    storeBoard(board);

    // DEBUG
    /*
    showDeck(board.decks[1], "discard pile");
    showDeck(board.decks[0], "draw pile");
    */
    checkWinner();
    updateActivePlayer(false);
} ELSE {
    String color IS storeBoard.RESULT.decks[1].cards[size(storeBoard.RESULT.decks[1].cards) - 1].color;
    Integer value IS storeBoard.RESULT.decks[1].cards[size(storeBoard.RESULT.decks[1].cards) - 1].value;
    write("Invalid played card: "
          + "{" + "Value: " + playCard.RESULT.value + ", Color: " + playCard.RESULT.color + "}\n"
          + "\nThe top card of the discard pile is card: "
          + "{" + "Value: " + value + ", Color: " + color + "}\n");
    //updateActivePlayer(true);
}


Rule winner WHEN [checkWinner] IF (size(storeBoard.RESULT.activePlayer.hand.cards) LESS THAN 1) {
    declareWinner(storeBoard.RESULT.activePlayer);
    setState("End");
}


Rule startTurn WHEN [setState, updateActivePlayer] IF ("AutoPlay" EQUALS setState.RESULT OR "Play" EQUALS setState.RESULT){
    Board board IS storeBoard.RESULT;
    showBoard(board);
}


/*** STATES ***/
State Play ALLOWS [playCard]

State AutoPlay ALLOWS [] WITH LOOP {
    FOR(Integer i; "End" NOT EQUALS setState.RESULT; i IS i) {
        Integer validCardIndex IS findValidCard();
        playCard(validCardIndex);
    }
}

State End ALLOWS []


/*** MAIN GAME ***/
setupGame(true);

Player playerOne IS NEW Player {"John"; NEW Deck{};};
Player playerTwo IS NEW Player {"Userman"; NEW Deck{};};

Board b1 IS NEW Board {
    [playerOne, playerTwo];
    [shuffle(makeCards())];  // Index 0 is draw pile, index 1 is discard pile
    playerOne;
};

storeBoard(b1); // Save board for later use. Acts like a global variable

// First activePlayer
drawToPlayer(2); // Index 0 in actionCall is source deck
updateActivePlayer(false); //

// Second activePlayer
drawToPlayer(2);
updateActivePlayer(false); // Game starts first activePlayer;

addTopCard(); // Add topcard to discard pile
setupGame(false); // End setup phase. Activates certain write actions

// Automatic playing - please do not setState() to "Play"!
//setState("AutoPlay");

// Manual play.
setState("Play");
